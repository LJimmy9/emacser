#+PROPERTY: header-args :results none :async
#+AUTHOR: Jimmy Lau
#+TITLE: Emacs Configuration

* Prerequisites

1. [[https://github.com/BurntSushi/ripgrep][ripgrep - Text search / grep]]
2. [[https://github.com/sharkdp/fd][fd - File finder]]
3. [[https://github.com/ImageMagick/ImageMagick][ImageMagick - Image processing tool]]

* Prestartup

** early-init.el

#+begin_src elisp :tangle early-init.el
  (setq	inhibit-startup-message   t
	frame-resize-pixelwise    t  ; fine resize
	package-native-compile    t) ; native compile packages

  (blink-cursor-mode 0)              ; disable blinking cursor

  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))

  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))

  (when (fboundp 'tooltip-mode)
    (tooltip-mode -1))

  (when (fboundp 'menu-bar-mode)
    (menu-bar-mode -1))


  (setq ns-use-native-fullscreen :true)
  (add-to-list 'default-frame-alist '(fullscreen . fullscreen))

  (defun my/set-font ()
    (set-face-attribute 'default nil
			:font "Cascadia Mono"
			:height 140))

  (my/set-font)
  (add-hook 'server-after-make-frame-hook #'my/set-font)
#+end_src


* Startup

** Temp Files
#+begin_src elisp :tangle startup.el
  (setq backup-directory-alist `(("." . ,(expand-file-name ".tmp/backups/"
							   user-emacs-directory))))

  (setq custom-file (locate-user-emacs-file ".custom.el"))
  (load custom-file :no-error-if-file-is-missing)
#+end_src

** Miscellaneous
#+begin_src elisp :tangle startup.el
  (add-hook 'before-save-hook #'whitespace-cleanup)
  (setq-default sentence-end-double-space nil)
  (global-subword-mode 1)
  (setq scroll-conservatively 1000)
  (save-place-mode t)

  (setq delete-by-moving-to-trash t)
  (setopt use-short-answers t)

  (global-auto-revert-mode t) ; Doesn't work on macos for some reason?
  (auto-revert-mode t)

  (setq undo-limit 10000000)

  (global-hl-line-mode t)

  (setq window-combination-resize t) ; take new window space from all other windows

  (global-visual-line-mode t)

#+end_src

* Packages

** Setup
#+begin_src elisp :tangle packages.el
  (require 'package)
  (setq use-package-always-ensure t)

  (package-initialize)

  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))

#+end_src

** Theme

#+begin_src elisp :tangle packages.el
  (use-package modus-themes
    :ensure t
    :config
    (load-theme 'modus-vivendi-tinted :no-confirm-loading))
#+end_src

** Nerd Icons
#+begin_src elisp :tangle packages.el
  (use-package nerd-icons
    :ensure t)

  (use-package nerd-icons-completion
    :ensure t
    :after marginalia
    :config
    (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))

  (use-package nerd-icons-corfu
    :ensure t
    :after corfu
    :config
    (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))

  (use-package nerd-icons-dired
    :ensure t
    :hook
    (dired-mode . nerd-icons-dired-mode))
#+end_src

** Dired
#+begin_src elisp :tangle packages.el
  (use-package dired
    :ensure nil
    :commands (dired)
    :hook
    ((dired-mode . dired-hide-details-mode)
     (dired-mode . hl-line-mode))
    :config
    (add-hook 'dired-mode-hook 'auto-revert-mode)
    (setq-default dired-listing-switches "-alh")
    (setq dired-dwim-target t)
    (setq dired-auto-revert-buffer 1)
    (setq dired-recursive-copies 'always)
    (setq dired-recursive-deletes 'always)
    (setq delete-by-moving-to-trash t)
    (setq dired-dwim-target t))
#+end_src

** Undo

#+begin_src elisp :tangle packages.el
  (use-package undo-fu
    :ensure t
    :config
    (global-unset-key (kbd "C-z"))
    (global-set-key (kbd "C-z")   'undo-fu-only-undo)
    (global-set-key (kbd "C-S-z") 'undo-fu-only-redo))
#+end_src


** Evil Mode

*** Evil Package Setup
#+begin_src elisp :tangle packages.el
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t
	  evil-want-keybinding nil
	  evil-want-C-u-scroll t
	  evil-want-C-d-scroll t
	  evil-want-C-i-jump t
	  evil-respect-visual-line-mode t
	  evil-undo-system 'undo-fu)
    :config
    (evil-mode 1)
    )

  (use-package evil-collection
    :ensure t
    :after evil
    :config
    (evil-collection-init))

  (use-package evil-nerd-commenter
    :ensure t
    :after evil
    )
#+end_src

** Expand Region
#+begin_src elisp :tangle packages.el
    (use-package expand-region
  :ensure t)
#+end_src

** Magit
#+begin_src elisp :tangle packages.el
  (use-package magit
    :ensure t
    :config
    (with-eval-after-load 'magit-mode
      (add-hook 'after-save-hook 'magit-after-save-refresh-status t)
      ))
#+end_src

** Rainbow Delimiters
#+begin_src elisp :tangle packages.el
  (use-package rainbow-delimiters
    :ensure t
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** xclip

#+begin_src elisp :tangle packages.el
  (use-package xclip
    :config
    (xclip-mode))
#+end_src

** Minibuffer

*** Vertico
#+begin_src elisp :tangle packages.el
  (use-package vertico
    :ensure t
    :init
    (vertico-mode 1)
    (setq vertico-cycle t)
    (setq vertico-resize t))
#+end_src

*** Marginalia
#+begin_src elisp :tangle packages.el
  (use-package marginalia
    :ensure t
    :hook (after-init . marginalia-mode))
#+end_src

*** Orderless
#+begin_src elisp :tangle packages.el
  (use-package orderless
    :ensure t
    :config
    (setq completion-styles '(orderless basic))
    (setq completion-category-defaults nil)
    (setq completion-category-overrides nil))
#+end_src

*** Savehist
#+begin_src elisp :tangle packages.el
  (use-package savehist
    :ensure nil ; it is built-in
    :hook (after-init . savehist-mode))
#+end_src

*** Corfu
#+begin_src elisp :tangle packages.el
  (use-package corfu
    :ensure t
    :hook (after-init . global-corfu-mode)
    :bind (:map corfu-map ("<tab>" . corfu-complete))
    :config
    (setq tab-always-indent 'complete)
    (setq corfu-preview-current nil)
    (setq corfu-min-width 20)

    (setq corfu-popupinfo-delay '(1.25 . 0.5))
    (corfu-popupinfo-mode 1) ; shows documentation after `corfu-popupinfo-delay'

    ;; Sort by input history (no need to modify `corfu-sort-function').
    (with-eval-after-load 'savehist
      (corfu-history-mode 1)
      (add-to-list 'savehist-additional-variables 'corfu-history)))
#+end_src

*** Embark

#+begin_src elisp :tangle packages.el
(use-package embark
  :bind
  (("C-." . embark-act)						;; pick some comfortable binding
   ("M-." . embark-dwim)						;; good alternative: M-.
   ("C-h B" . embark-bindings))					;; alternative for `describe-bindings'
  :init
  (setq prefix-help-command #'embark-prefix-help-command)
  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
		 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
		   nil
		   (window-parameters (mode-line-format . none)))))
#+end_src

*** Consult


#+begin_src elisp :tangle packages.el
  (use-package consult
    :hook (completion-list-mode . consult-preview-at-point-mode)
    :init
    (setq consult-project-function nil)					;; always work from the current directory (use `cd' to switch directory)
    (setq register-preview-delay 0.1
	  register-preview-function #'consult-register-format)
    (advice-add #'register-preview :override #'consult-register-window)
)
  (use-package embark-consult
    :after (embark consult))

#+end_src

#+end_src


* After Packages

** Extra Evil Keybindings
#+begin_src elisp :tangle after.el
  (evil-set-leader nil (kbd "SPC"))

  (define-key evil-motion-state-map (kbd "SPC") nil)
  (define-key evil-motion-state-map (kbd ",") nil)
  (define-key evil-motion-state-map (kbd "C-e") nil)
  (define-key evil-motion-state-map (kbd "C-y") nil)
  (define-key evil-motion-state-map (kbd "C-f") nil)
  (define-key evil-motion-state-map (kbd "C-b") nil)
  (define-key evil-motion-state-map (kbd "ge") #'er/expand-region)
  (define-key evil-motion-state-map (kbd "gr") #'er/contract-region)

  (define-key evil-motion-state-map (kbd "gj") nil)
  (define-key evil-motion-state-map (kbd "gk") nil)
  (define-key evil-insert-state-map (kbd "C-t") nil)
  (define-key evil-insert-state-map (kbd "U") nil)
  (define-key evil-insert-state-map (kbd "C-a") nil)
  (define-key evil-insert-state-map (kbd "C-d") nil)
  (define-key evil-insert-state-map (kbd "C-y") nil)

  (evil-define-key 'normal 'global (kbd "<leader>qq") 'evil-save-modified-and-close)
  (evil-define-key 'normal 'global (kbd "<leader>aa") 'indent-region)
  (evil-define-key 'normal 'global (kbd "<leader>ar") 'align-regexp)
  (evil-define-key 'normal 'global (kbd "<leader>ss") 'save-buffer)
  (evil-define-key 'normal 'global (kbd "<leader>xe") 'eval-last-sexp)
  (evil-define-key 'normal 'global (kbd "<leader>gg") 'magit-status)
  (evil-define-key 'normal 'global (kbd "gcc") 'evilnc-comment-or-uncomment-lines)
  (evil-define-key 'normal 'global (kbd "<leader>er") (lambda ()
							(interactive)
							(dired (file-name-directory (or (buffer-file-name) locate-user-emacs-file)))))


  (evil-define-key 'normal 'global (kbd "<leader>fg") 'consult-ripgrep)
  (evil-define-key 'normal 'global (kbd "<leader>ff") 'consult-fd)
  (evil-define-key 'normal 'global (kbd "<leader>fo") 'consult-outline)
  (evil-define-key 'normal 'global (kbd "<leader>fl") 'consult-line)
  (evil-define-key 'normal 'global (kbd "<leader>fb") 'consult-buffer)
  (evil-define-key 'normal 'global (kbd "<leader>fm") 'consult-mark)
  (evil-define-key 'normal 'global (kbd "<leader>fr") 'consult-register)
#+end_src

* Init
#+begin_src elisp :tangle init.el
  (dolist (module '("startup.el" "packages.el" "after.el"))
    (load (expand-file-name module
			    (expand-file-name user-emacs-directory))))
#+end_src



;; Local Variables:
;; eval: (add-hook 'after-save-hook (lambda () (org-babel-tangle)) nil t)
;; End:
