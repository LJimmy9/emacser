#+PROPERTY: header-args :results none :async
#+AUTHOR: Jimmy Lau
#+TITLE: Emacs Configuration

* Prerequisites

1. [[https://github.com/BurntSushi/ripgrep][ripgrep - Text search / grep]]
2. [[https://github.com/sharkdp/fd][fd - File finder]]
3. [[https://github.com/ImageMagick/ImageMagick][ImageMagick - Image processing tool]]

* Prestartup

** early-init.el

#+begin_src elisp :tangle early-init.el
  (setq package-enable-at-startup nil
	inhibit-startup-message   t
	frame-resize-pixelwise    t  ; fine resize
	package-native-compile    t) ; native compile packages
  (scroll-bar-mode -1)               ; disable scrollbar
  (tool-bar-mode -1)                 ; disable toolbar
  (tooltip-mode -1)                  ; disable tooltips
  (set-fringe-mode 10)               ; give some breathing room
  (menu-bar-mode -1)                 ; disable menubar
  (blink-cursor-mode 0)              ; disable blinking cursor

  (setq package-enable-at-startup nil)

  (setq ns-use-native-fullscreen :true)
  (add-to-list 'default-frame-alist '(fullscreen . fullscreen))

  (defun my/set-font ()
    (set-face-attribute 'default nil
			:font "Cascadia Mono"
			:height 140))

  (my/set-font)
  (add-hook 'server-after-make-frame-hook #'my/set-font)
#+end_src


* Startup

** Programming Modes
#+begin_src elisp :tangle startup.el
  (setq-default initial-major-mode 'emacs-lisp-mode)
  (defvar prog-modes '(
		       c-mode
		       c++-mode
		       java-mode
		       python-mode
		       ruby-mode
		       perl-mode
		       php-mode
		       js-mode
		       emacs-lisp-mode
		       ))
  (dolist (mode prog-modes)
    (add-hook (intern (concat (symbol-name mode) "-hook")) #'display-line-numbers-mode)
    )
  (dolist (mode prog-modes)
    (add-hook mode #'hs-minor-mode))
#+end_src

** Temp Files
#+begin_src elisp :tangle startup.el
  (setq backup-directory-alist `(("." . ,(expand-file-name ".tmp/backups/"
							   user-emacs-directory))))

  (setq backup-by-copying t)

  (setq-default custom-file (expand-file-name ".custom.el" user-emacs-directory))
  (when (file-exists-p custom-file) ; Donâ€™t forget to load it, we still need it
    (load custom-file))
#+end_src

** Miscellaneous
#+begin_src elisp :tangle startup.el
  (add-hook 'before-save-hook #'whitespace-cleanup)
  (setq-default sentence-end-double-space nil)
  (global-subword-mode 1)
  (setq scroll-conservatively 1000)

  (setq delete-by-moving-to-trash t)
  (setopt use-short-answers t)
  (global-auto-revert-mode 1)
  (setq undo-limit        100000000
	auto-save-default t)

  (setq window-combination-resize t) ; take new window space from all other windows

  (setq x-stretch-cursor t)

  (setq-default dired-listing-switches "-alh")

  (setq dired-dwim-target t)
  (setq dired-auto-revert-buffer 1)
  (global-visual-line-mode t)

#+end_src

* Packages

** Setup
#+begin_src elisp :tangle packages.el
  (add-hook 'server-after-make-frame-hook #'my/set-font)

  (setq package-archives '(("melpa"  . "https://melpa.org/packages/")
			   ("gnu"    . "https://elpa.gnu.org/packages/")
			   ("nongnu" . "https://elpa.nongnu.org/nongnu/")))

  (defvar bootstrap-version)
  (defvar comp-deferred-compilation-deny-list ())
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (straight-use-package '(use-package :build t))
  (setq use-package-always-ensure t)
#+end_src

** General
#+begin_src elisp :tangle packages.el
  (use-package general
    :straight (:build t)
    :init
    (general-auto-unbind-keys)
    :config
    (general-create-definer jl/undefine
      :keymaps 'override
      :states '(normal emacs))
    (general-create-definer jl/evil
      :states '(normal))
    (general-create-definer jl/leader-key
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC"
      :global-prefix "C-SPC")
    (general-create-definer jl/major-leader-key
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix ","
      :global-prefix "M-m"))

#+end_src

** Evil Mode

*** Evil Package Setup
#+begin_src elisp :tangle packages.el
  (use-package evil
    :straight (:build t)
    :after (general)
    :init
    (setq evil-want-integration t
	  evil-want-keybinding nil
	  evil-want-C-u-scroll t
	  evil-want-C-i-jump nil)
    (require 'evil-vars)
    :config
    (general-define-key
     :keymaps 'evil-motion-state-map
     "SPC" nil
     ","   nil
     "C-e" nil
     "C-y" nil
     "C-f" nil
     "C-b" nil
     "C-d" nil
     "gj" nil
     "gk" nil
     )
    (general-define-key
     :keymaps 'evil-insert-state-map
     "C-t" nil
     "U"   nil
     "C-a" nil
     "C-d" nil
     "C-y" nil
     )
    (evil-mode 1)
    (setq evil-want-fine-undo t)
    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))


  (use-package evil-collection
    :after evil
    :straight (:build t)
    :config
    (evil-collection-init))


  (use-package evil-nerd-commenter
    :after evil
    :straight (:build t)
    :config
    (general-define-key
     :keymaps 'evil-motion-state-map
     "gcc" #'evilnc-comment-or-uncomment-lines
    ))
#+end_src

** Doom Themes
#+begin_src elisp :tangle packages.el
  (use-package doom-themes
    :straight (:build t)
    :defer t
    :init (load-theme 'doom-nord-aurora t))
#+end_src
** Mode Line
#+begin_src elisp :tangle packages.el
  (require 'time)
  (setq display-time-format "%Y-%m-%d %H:%M")
  (display-time-mode 1)

  (let ((battery-str (battery)))
    (display-battery-mode 1))
#+end_src
** Expand Region
#+begin_src elisp :tangle packages.el
  (use-package expand-region
    :config
    (general-define-key
     :keymaps 'evil-motion-state-map
     "vv" #'er/expand-region
     ))
#+end_src

** Magit
#+begin_src elisp :tangle packages.el
(use-package magit
  :ensure t)
#+end_src

** Rainbow Delimiters
#+begin_src elisp :tangle packages.el
(use-package rainbow-delimiters
  :straight (:build t)
  :defer t
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

* After Packages

** Extra Evil Keybindings
#+begin_src elisp :tangle after.el
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
  (jl/leader-key "aa" 'indent-region)
  (jl/leader-key "ar" 'align-regexp)
  (jl/leader-key "er" (lambda ()
			(interactive)
			(dired (file-name-directory (or (buffer-file-name) "~/dot-emacs/emacs-config.org")))))
  (jl/leader-key "gg" 'magit)
#+end_src

* Init
#+begin_src elisp :tangle init.el
(dolist (module '("startup.el" "packages.el" "after.el"))
  (load (expand-file-name module
			  (expand-file-name user-emacs-directory))))
#+end_src



;; Local Variables:
;; eval: (add-hook 'after-save-hook (lambda () (org-babel-tangle)) nil t)
;; End:
