#+PROPERTY: header-args :results none :async
#+AUTHOR: Jimmy Lau
#+TITLE: Emacs Configuration

* Prerequisites

1. [[https://github.com/BurntSushi/ripgrep][ripgrep - Text search / grep]]
2. [[https://github.com/sharkdp/fd][fd - File finder]]
3. [[https://github.com/ImageMagick/ImageMagick][ImageMagick - Image processing tool]]

* Prestartup

** early-init.el

#+begin_src elisp :tangle early-init.el
  (setq	inhibit-startup-message   t
	frame-resize-pixelwise    t  ; fine resize
	package-native-compile    t) ; native compile packages

  (blink-cursor-mode 0)              ; disable blinking cursor

  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))

  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))

  (when (fboundp 'tooltip-mode)
    (tooltip-mode -1))

  (when (fboundp 'menu-bar-mode)
    (menu-bar-mode -1))


  (setq ns-use-native-fullscreen :true)
  (add-to-list 'default-frame-alist '(fullscreen . fullscreen))

  (defun my/set-font ()
    (set-face-attribute 'default nil
			:font "Cascadia Mono"
			:height 140))

  (my/set-font)
  (add-hook 'server-after-make-frame-hook #'my/set-font)
#+end_src


* Startup

** Temp Files
#+begin_src elisp :tangle startup.el
  (setq backup-directory-alist `(("." . ,(expand-file-name ".tmp/backups/"
							   user-emacs-directory))))

  (setq custom-file (locate-user-emacs-file ".custom.el"))
  (load custom-file :no-error-if-file-is-missing)
#+end_src

** Miscellaneous
#+begin_src elisp :tangle startup.el
  (add-hook 'before-save-hook #'whitespace-cleanup)
  (setq-default sentence-end-double-space nil)
  (global-subword-mode 1)
  (global-display-line-numbers-mode)

  (setq scroll-conservatively 1000)
  (save-place-mode t)

  (ffap-bindings)
  (require 'ansi-color)
  (add-hook 'compilation-filter-hook 'ansi-color-compilation-filter)

  (setq delete-by-moving-to-trash t)
  (setopt use-short-answers t)

  (global-auto-revert-mode t) ; Doesn't work on macos for some reason?
  (auto-revert-mode t)

  (setq undo-limit 10000000)

  (global-hl-line-mode t)

  (setq window-combination-resize t) ; take new window space from all other windows

  (global-visual-line-mode t)

#+end_src

* Packages

** Setup
#+begin_src elisp :tangle packages.el
  (require 'package)
  (setq use-package-always-ensure t)

  (package-initialize)

  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))

#+end_src

** Theme

*** Catpuccin
#+begin_src elisp :tangle packages.el
  (use-package catppuccin-theme
    :vc (:url "https://github.com/catppuccin/emacs"
	     :branch "main")
    :config
    (setq catppuccin-flavor 'frappe)
    (load-theme 'catppuccin :no-confirm)
    )
#+end_src

** Dired
#+begin_src elisp :tangle packages.el
  (use-package dired
    :ensure nil
    :commands (dired)
    :hook
    ((dired-mode . dired-hide-details-mode)
     (dired-mode . hl-line-mode))
    :config
    (add-hook 'dired-mode-hook 'auto-revert-mode)
    (setq-default dired-listing-switches "-alh")
    (setq dired-dwim-target t)
    (setq dired-auto-revert-buffer 1)
    (setq dired-recursive-copies 'always)
    (setq dired-recursive-deletes 'always)
    (setq delete-by-moving-to-trash t)
    (setq dired-dwim-target t))
#+end_src

** Undo

#+begin_src elisp :tangle packages.el
  (use-package undo-fu
    :config
    (global-unset-key (kbd "C-z"))
    (global-set-key (kbd "C-z")   'undo-fu-only-undo)
    (global-set-key (kbd "C-S-z") 'undo-fu-only-redo))
#+end_src

** Company

#+begin_src elisp :tangle packages.el
  (use-package company
    :config
    (global-company-mode))
  (use-package company-box
    :hook (company-mode . company-box-mode)
    :config
    (setq company-box-max-candidates 20)
    )
#+end_src

** Evil Mode

*** Evil Package Setup
#+begin_src elisp :tangle packages.el
  (use-package evil
    :init
    (setq evil-want-integration t
	  evil-want-minibuffer t
	  evil-want-keybinding nil
	  evil-want-C-u-scroll t
	  evil-want-C-d-scroll t
	  evil-want-C-i-jump t
	  evil-respect-visual-line-mode t
	  evil-undo-system 'undo-fu)
    :config
    (evil-mode 1)
    (eval-after-load "evil-maps"
      (dolist (map '(evil-motion-state-map
		     ;; evil-insert-state-map
		     evil-emacs-state-map))
	(define-key (eval map) "\C-n" nil)
	(define-key (eval map) "\C-p" nil)
	))
    )

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init)
    )

  (use-package evil-nerd-commenter
    :after evil
    )

  (use-package evil-leader
    :config
    (evil-leader/set-leader "<SPC>")
    (global-evil-leader-mode)
    )
#+end_src

** Expand Region
#+begin_src elisp :tangle packages.el
  (use-package expand-region
    )
#+end_src

** Magit
#+begin_src elisp :tangle packages.el
  (use-package magit
    :config
    (with-eval-after-load 'magit-mode
      (add-hook 'after-save-hook 'magit-after-save-refresh-status t)
      ))
#+end_src

** Rainbow Delimiters
#+begin_src elisp :tangle packages.el
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** xclip

#+begin_src elisp :tangle packages.el
  (use-package xclip
    :config
    (xclip-mode))
#+end_src

** Minibuffer

*** Vertico
#+begin_src elisp :tangle packages.el
    (use-package vertico
      :init
      (vertico-mode 1)
      (setq vertico-cycle t)
      (setq vertico-resize t))

  (use-package vertico-directory
    :after vertico
    :ensure nil
    ;; More convenient directory navigation commands
    :bind (:map vertico-map
		("RET" . vertico-directory-enter)
		("DEL" . vertico-directory-delete-char)
		("M-DEL" . vertico-directory-delete-word))
    ;; Tidy shadowed file names
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))

#+end_src

*** Marginalia
#+begin_src elisp :tangle packages.el
  (use-package marginalia
    :hook (after-init . marginalia-mode))
#+end_src

*** Orderless
#+begin_src elisp :tangle packages.el
  (use-package orderless
    :config
    (setq completion-styles '(orderless basic))
    (setq completion-category-defaults nil)
    (setq completion-category-overrides nil))
#+end_src

*** Savehist
#+begin_src elisp :tangle packages.el
  (use-package savehist
    :ensure nil ; it is built-in
    :hook (after-init . savehist-mode))
#+end_src

*** wgrep
#+begin_src elisp :tangle packages.el
  (use-package wgrep
    :bind ( :map grep-mode-map
	    ("e" . wgrep-change-to-wgrep-mode)
	    ("C-x C-q" . wgrep-change-to-wgrep-mode)
	    ("C-c C-c" . wgrep-finish-edit)))
#+end_src

* After Packages

** Extra Evil Keybindings
#+begin_src elisp :tangle after.el
  (define-key evil-motion-state-map (kbd "SPC") nil)
  (define-key evil-motion-state-map (kbd ",") nil)
  (define-key evil-motion-state-map (kbd "C-e") nil)
  (define-key evil-insert-state-map (kbd "C-e") nil)
  (define-key evil-motion-state-map (kbd "C-y") nil)
  (define-key evil-motion-state-map (kbd "C-f") nil)
  (define-key evil-motion-state-map (kbd "C-b") nil)
  (define-key evil-motion-state-map (kbd "ge") #'er/expand-region)
  (define-key evil-motion-state-map (kbd "gr") #'er/contract-region)

  (define-key evil-motion-state-map (kbd "gj") nil)
  (define-key evil-motion-state-map (kbd "gk") nil)
  (define-key evil-insert-state-map (kbd "C-t") nil)
  (define-key evil-insert-state-map (kbd "U") nil)
  (define-key evil-insert-state-map (kbd "C-a") nil)
  (define-key evil-insert-state-map (kbd "C-d") nil)
  (define-key evil-insert-state-map (kbd "C-y") nil)


  (define-key minibuffer-local-map (kbd "C-n") 'vertico-next)
  (define-key minibuffer-local-map (kbd "C-p") 'vertico-prev)


  (evil-leader/set-key
    "aa" 'indent-region
    "ar" 'align-regexp
    "qq" 'evil-save-modified-and-close
    "ss" 'save-buffer
    "xe" 'eval-last-sexp
    "gg" 'magit-status
    "rr" 'compile
    "er" (lambda ()
	     (interactive)
	     (dired (file-name-directory (or (buffer-file-name) locate-user-emacs-file))))
    )

  (evil-define-key 'normal 'global (kbd "gcc") 'evilnc-comment-or-uncomment-lines)

#+end_src

* Init
#+begin_src elisp :tangle init.el
  (dolist (module '("startup.el" "packages.el" "after.el"))
    (load (expand-file-name module
			    (expand-file-name user-emacs-directory))))
#+end_src


;; Local Variables:
;; eval: (add-hook 'after-save-hook (lambda () (org-babel-tangle)) nil t)
;; End:
